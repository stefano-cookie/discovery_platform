datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String   @id @default(uuid())
  email           String   @unique
  password        String
  role            UserRole @default(USER)
  isActive        Boolean  @default(true)
  emailVerified   Boolean  @default(false)
  emailVerificationToken String?
  emailVerificationTokenExpiry DateTime?
  emailVerifiedAt DateTime?
  lastLoginAt     DateTime?
  createdAt       DateTime @default(now())
  
  // Codice univoco per accesso sicuro al form iscrizione
  verificationCode String? @unique
  codeExpiresAt   DateTime?
  
  // Partner assignment (permanent association)
  assignedPartnerId String?
  
  // Relazioni
  partner         Partner?      // Solo per utenti che sono partner
  assignedPartner Partner?      @relation("UserPartnerAssignment", fields: [assignedPartnerId], references: [id])
  profile         UserProfile?  // Profilo con dati anagrafici
  registrations   Registration[] // Iscrizioni ai corsi
  documents       UserDocument[] // Repository documenti dell'utente
  verifiedDocuments UserDocument[] @relation("DocumentVerifier") // Documenti verificati (per partner)
  uploadedDocuments UserDocument[] @relation("DocumentUploader") // Documenti caricati
  documentAuditLogs DocumentAuditLog[] // Log audit documenti
  documentActions   DocumentActionLog[] @relation("DocumentActions") // Azioni sui documenti
  offerVisibilities OfferVisibility[]
  offerAccess     UserOfferAccess[] // Accesso alle offerte aggiuntive
}

enum UserRole {
  ADMIN
  PARTNER
  USER
}

model Partner {
  id                      String   @id @default(uuid())
  userId                  String   @unique
  parentId                String?
  referralCode            String   @unique
  canCreateChildren       Boolean  @default(false)
  commissionPerUser       Decimal  @default(1000)
  commissionToAdmin       Decimal  @default(3000)
  promotedFromChild       Boolean  @default(false)
  createdAt               DateTime @default(now())
  
  user                    User     @relation(fields: [userId], references: [id])
  parent                  Partner? @relation("PartnerHierarchy", fields: [parentId], references: [id])
  children                Partner[] @relation("PartnerHierarchy")
  assignedUsers           User[]   @relation("UserPartnerAssignment") // Utenti assegnati permanentemente
  registrations           Registration[]
  offers                  PartnerOffer[]
  coupons                 Coupon[]
  transfersFrom           UserTransfer[] @relation("TransferFrom")
  transfersTo             UserTransfer[] @relation("TransferTo")
  userOfferAccess         UserOfferAccess[] // Accessi alle offerte abilitati dal partner
}

model Course {
  id           String       @id @default(uuid())
  name         String
  description  String?
  templateType CourseTemplate @default(TFA)
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  
  offers       PartnerOffer[]
}

enum CourseTemplate {
  TFA
  CERTIFICATION
}

model PartnerOffer {
  id                      String   @id @default(uuid())
  partnerId               String
  courseId                String
  name                    String
  offerType               OfferType @default(TFA_ROMANIA)
  totalAmount             Decimal
  installments            Int
  installmentFrequency    Int      // months
  customPaymentPlan       Json?    // For custom payment plans
  referralLink            String   @unique
  isActive                Boolean  @default(true)
  createdAt               DateTime @default(now())
  
  partner                 Partner  @relation(fields: [partnerId], references: [id])
  course                  Course   @relation(fields: [courseId], references: [id])
  registrations           Registration[]
  visibilities            OfferVisibility[]
  userAccess              UserOfferAccess[] // Utenti che hanno accesso a questa offerta
}

enum OfferType {
  TFA_ROMANIA
  CERTIFICATION
}

model Coupon {
  id                String   @id @default(uuid())
  partnerId         String
  code              String
  discountType      DiscountType
  discountAmount    Decimal?
  discountPercent   Decimal?
  maxUses           Int?
  usedCount         Int      @default(0)
  validFrom         DateTime
  validUntil        DateTime
  isActive          Boolean  @default(true)
  
  partner           Partner  @relation(fields: [partnerId], references: [id])
  uses              CouponUse[]
  
  @@unique([partnerId, code])
}

enum DiscountType {
  FIXED
  PERCENTAGE
}

model UserProfile {
  id                      String   @id @default(uuid())
  userId                  String   @unique
  
  // Anagrafica (compilata alla registrazione)
  cognome                 String
  nome                    String
  dataNascita             DateTime
  luogoNascita            String
  provinciaNascita        String?
  sesso                   String?
  codiceFiscale           String   @unique
  telefono                String
  nomePadre               String? // Opzionale per Certificazioni
  nomeMadre               String? // Opzionale per Certificazioni
  
  // Residenza (compilata alla registrazione)
  residenzaVia            String
  residenzaCitta          String
  residenzaProvincia      String
  residenzaCap            String
  
  // Domicilio (opzionale)
  hasDifferentDomicilio   Boolean  @default(false)
  domicilioVia            String?
  domicilioCitta          String?
  domicilioProvincia      String?
  domicilioCap            String?
  
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  
  user                    User     @relation(fields: [userId], references: [id])
}

model Registration {
  id              String   @id @default(uuid())
  userId          String
  partnerId       String   // Partner che ha portato l'iscrizione
  courseId        String
  partnerOfferId  String?
  couponId        String?
  offerType       OfferType @default(TFA_ROMANIA)
  
  // Dati specifici iscrizione (non nel profilo)
  // Per TFA Romania:
  tipoLaurea              String?
  laureaConseguita        String?
  laureaConseguitaCustom  String?
  laureaUniversita        String?
  laureaData              DateTime?
  
  // Laurea Triennale (per magistrali)
  tipoLaureaTriennale     String?
  laureaConseguitaTriennale String?
  laureaUniversitaTriennale String?
  laureaDataTriennale     DateTime?
  
  // Dati pergamena (compilati dal partner)
  numeroPergamena         String?
  dataRilascioPergamena   DateTime?
  
  // Diploma Superiori (obbligatorio per TFA)
  diplomaData             DateTime?  // Data conseguimento diploma
  diplomaCitta            String?    // Città conseguimento
  diplomaProvincia        String?    // Provincia conseguimento
  diplomaIstituto         String?    // Nome istituto
  diplomaVoto             String?    // Voto diploma
  
  // Professione (solo TFA Romania)
  tipoProfessione         String?
  scuolaDenominazione     String?
  scuolaCitta             String?
  scuolaProvincia         String?
  
  // Pagamenti
  originalAmount  Decimal
  finalAmount     Decimal
  installments    Int
  
  status          RegistrationStatus @default(PENDING)
  
  // Contratti
  contractTemplateUrl     String?   // URL contratto precompilato
  contractSignedUrl       String?   // URL contratto firmato
  contractGeneratedAt     DateTime? // Data generazione template
  contractUploadedAt      DateTime? // Data upload firmato
  
  // Documenti partner (non visibili a utente)
  cnredUrl               String?
  cnredUploadedAt        DateTime?
  adverintiaUrl          String?
  adverintiaUploadedAt   DateTime?
  
  // Certificazioni - data esame
  examDate               DateTime? // Per workflow certificazioni
  examRegisteredBy       String?   // Partner che registra data
  
  // Date workflow
  dataVerifiedAt      DateTime?
  contractSignedAt    DateTime?
  enrolledAt          DateTime?
  
  // Sistema accesso sicuro
  accessToken         String?   @unique // Token sicuro per accesso form
  tokenExpiresAt      DateTime? // Scadenza token
  
  createdAt       DateTime @default(now())
  
  user            User         @relation(fields: [userId], references: [id])
  partner         Partner      @relation(fields: [partnerId], references: [id])
  offer           PartnerOffer? @relation(fields: [partnerOfferId], references: [id])
  userDocuments   UserDocument[] // Unified document system
  payments        Payment[]
  deadlines       PaymentDeadline[]
  couponUses      CouponUse[]
}

// Gestione accesso utenti alle offerte aggiuntive del partner
model UserOfferAccess {
  id        String   @id @default(uuid())
  userId    String
  offerId   String
  partnerId String   // Partner che ha abilitato l'accesso
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user    User         @relation(fields: [userId], references: [id])
  offer   PartnerOffer @relation(fields: [offerId], references: [id])
  partner Partner      @relation(fields: [partnerId], references: [id])
  
  @@unique([userId, offerId]) // Un utente può avere accesso a un'offerta solo una volta
}

enum RegistrationStatus {
  PENDING
  DATA_VERIFIED
  CONTRACT_GENERATED
  CONTRACT_SIGNED
  ENROLLED
  COMPLETED
}

// Sistema Documenti Unificato - Enterprise Document Management
enum DocumentStatus {
  PENDING    // In attesa di verifica
  APPROVED   // Approvato dal partner
  REJECTED   // Rifiutato con motivazione
  EXPIRED    // Scaduto (per doc temporanei)
}

enum DocumentType {
  IDENTITY_CARD        // Carta identità
  PASSPORT            // Passaporto
  DIPLOMA             // Diploma superiori
  BACHELOR_DEGREE     // Laurea triennale
  MASTER_DEGREE       // Laurea magistrale
  TRANSCRIPT          // Transcript voti
  CV                  // Curriculum
  PHOTO               // Foto tessera
  RESIDENCE_CERT      // Certificato residenza
  BIRTH_CERT          // Certificato nascita
  CONTRACT_SIGNED     // Contratto firmato
  MEDICAL_CERT        // Certificato medico
  TESSERA_SANITARIA   // Tessera sanitaria
  OTHER               // Altri documenti
}

enum UploadSource {
  ENROLLMENT       // Durante iscrizione
  USER_DASHBOARD   // Da area personale
  PARTNER_PANEL    // Da pannello partner
}

model UserDocument {
  id                String   @id @default(uuid())
  userId            String
  registrationId    String?
  
  // Tipo e contenuto documento
  type              DocumentType  // Enum per tipo documento
  originalName      String        // Nome file originale
  mimeType          String        // MIME type per anteprima
  size              Int           // Dimensione in bytes
  url               String        // Path storage locale
  signedUrl         String?       // URL firmato temporaneo per download
  
  // Gestione approvazione
  status            DocumentStatus @default(PENDING)
  verifiedBy        String?       // ID partner che verifica
  verifiedAt        DateTime?
  rejectionReason   String?       // Motivo specifico rifiuto
  rejectionDetails  String?       // Note aggiuntive per utente
  
  // Tracking sorgente upload
  uploadSource      UploadSource  // ENROLLMENT, USER_DASHBOARD, PARTNER_PANEL
  uploadedBy        String        // ID utente o partner che carica
  uploadedByRole    UserRole      // USER, PARTNER, ADMIN
  uploadedAt        DateTime @default(now())
  
  // Metadati sicurezza
  checksum          String?       // Hash SHA-256 per integrità
  encryptionKey     String?       // Per documenti sensibili
  expiresAt         DateTime?     // Scadenza documento temporaneo
  
  // Notifiche
  partnerNotifiedAt DateTime?     // Quando partner è stato notificato
  userNotifiedAt    DateTime?     // Quando utente è stato notificato (per rifiuti)
  emailSentAt       DateTime?     // Timestamp invio email
  
  // Relazioni
  user              User @relation(fields: [userId], references: [id], onDelete: Cascade)
  registration      Registration? @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  verifier          User? @relation("DocumentVerifier", fields: [verifiedBy], references: [id])
  uploader          User @relation("DocumentUploader", fields: [uploadedBy], references: [id])
  auditLogs         DocumentAuditLog[]
  actionLogs        DocumentActionLog[]
  
  // Indici per performance
  @@index([userId, status])
  @@index([registrationId, type])
  @@index([status, partnerNotifiedAt])
  @@index([uploadedAt])
}

model DocumentAuditLog {
  id             String         @id @default(uuid())
  documentId     String
  action         String         // UPLOADED, APPROVED, REJECTED, DELETED, REPLACED
  performedBy    String
  previousStatus DocumentStatus?
  newStatus      DocumentStatus?
  notes          String?
  createdAt      DateTime       @default(now())
  
  document       UserDocument   @relation(fields: [documentId], references: [id], onDelete: Cascade)
  performer      User           @relation(fields: [performedBy], references: [id], onDelete: Restrict)
  
  @@index([documentId])
  @@index([performedBy])
  @@index([createdAt])
}

// Modello per log azioni documenti dettagliato
model DocumentActionLog {
  id            String   @id @default(uuid())
  documentId    String
  action        String   // UPLOAD, APPROVE, REJECT, DELETE, VIEW, DOWNLOAD
  performedBy   String
  performedRole UserRole
  details       Json?    // Dettagli aggiuntivi azione
  ipAddress     String?
  userAgent     String?
  timestamp     DateTime @default(now())
  
  document      UserDocument @relation(fields: [documentId], references: [id], onDelete: Cascade)
  performer     User @relation("DocumentActions", fields: [performedBy], references: [id])
  
  @@index([documentId, timestamp])
  @@index([performedBy, action])
}

model DocumentTypeConfig {
  id                String       @id @default(uuid())
  type              DocumentType @unique
  label             String
  description       String?
  isRequired        Boolean      @default(false)
  acceptedMimeTypes String[]     @default(["application/pdf", "image/jpeg", "image/png"])
  maxFileSize       Int          @default(10485760) // 10MB
  isActive          Boolean      @default(true)
  sortOrder         Int          @default(0)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

// Legacy Document model removed - replaced by UserDocument

model Payment {
  id              String   @id @default(uuid())
  registrationId  String
  amount          Decimal
  paymentDate     DateTime
  paymentNumber   Int
  isFirstPayment  Boolean  @default(false)
  isConfirmed     Boolean  @default(false)
  confirmedBy     String?
  confirmedAt     DateTime?
  createdBy       String
  createdAt       DateTime @default(now())
  
  registration    Registration @relation(fields: [registrationId], references: [id])
}

model PaymentDeadline {
  id              String   @id @default(uuid())
  registrationId  String
  amount          Decimal
  dueDate         DateTime
  paymentNumber   Int
  isPaid          Boolean  @default(false)
  
  registration    Registration @relation(fields: [registrationId], references: [id])
}

model CouponUse {
  id              String   @id @default(uuid())
  couponId        String
  registrationId  String
  discountApplied Decimal
  usedAt          DateTime @default(now())
  
  coupon          Coupon       @relation(fields: [couponId], references: [id])
  registration    Registration @relation(fields: [registrationId], references: [id])
}


model ChatConversation {
  id              String   @id @default(uuid())
  userId          String
  telegramChatId  String?
  isActive        Boolean  @default(true)
  messages        Json     @default("[]")
  createdAt       DateTime @default(now())
}

model OfferVisibility {
  id              String   @id @default(uuid())
  partnerOfferId  String
  userId          String
  isVisible       Boolean  @default(true)
  createdAt       DateTime @default(now())
  
  offer           PartnerOffer @relation(fields: [partnerOfferId], references: [id])
  user            User         @relation(fields: [userId], references: [id])
  
  @@unique([partnerOfferId, userId])
}

model UserTransfer {
  id                String   @id @default(uuid())
  userId            String
  fromPartnerId     String?
  toPartnerId       String
  transferredBy     String   // Admin user ID
  reason            String?
  transferredAt     DateTime @default(now())
  
  // Relazioni
  toPartner         Partner  @relation("TransferTo", fields: [toPartnerId], references: [id])
  fromPartner       Partner? @relation("TransferFrom", fields: [fromPartnerId], references: [id])
}