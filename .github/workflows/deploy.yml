name: Deploy to Production

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Cache dependencies and builds
      uses: actions/cache@v4
      id: cache
      with:
        path: |
          ~/.npm
          frontend/node_modules
          backend/node_modules
          frontend/node_modules/.cache
        key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-deps-

    - name: Install and build frontend
      working-directory: ./frontend
      env:
        # Optimization flags for faster builds
        CI: false
        GENERATE_SOURCEMAP: false
        INLINE_RUNTIME_CHUNK: false
        IMAGE_INLINE_SIZE_LIMIT: 0
        NODE_OPTIONS: --max-old-space-size=4096
        # Disable eslint during build for speed
        DISABLE_ESLINT_PLUGIN: true
        # Use faster JavaScript transformer
        FAST_REFRESH: false
        # Disable unnecessary features
        TSC_COMPILE_ON_ERROR: true
        ESLINT_NO_DEV_ERRORS: true
      run: |
        # Use cached node_modules if available, otherwise install
        if [ ! -d "node_modules" ]; then
          echo "Installing frontend dependencies..."
          npm ci --legacy-peer-deps --prefer-offline --no-audit --no-fund
        else
          echo "âœ“ Using cached node_modules"
        fi
        # Build with optimizations
        npm run build
        

    - name: Install and build backend
      working-directory: ./backend
      env:
        NODE_OPTIONS: --max-old-space-size=2048
      run: |
        # Use cached node_modules if available, otherwise install
        if [ ! -d "node_modules" ]; then
          echo "Installing backend dependencies..."
          npm ci --prefer-offline --no-audit --no-fund
        else
          echo "âœ“ Using cached node_modules"
          # Prisma might need regeneration even with cache
          npx prisma generate
        fi
        npm run build

    - name: Run deployment script
      run: |
        # Deployment directory
        DEPLOY_DIR="/var/www/vhosts/cfoeducation.it/discovery_platform_temp"
        mkdir -p "$DEPLOY_DIR"

        # Copy built files from runner workspace to deployment directory
        echo "ðŸ“¦ Copying frontend build..."
        rsync -av --delete $GITHUB_WORKSPACE/frontend/build/ $DEPLOY_DIR/frontend/build/

        echo "ðŸ“¦ Copying backend dist..."
        rsync -av --delete $GITHUB_WORKSPACE/backend/dist/ $DEPLOY_DIR/backend/dist/

        echo "ðŸ“¦ Copying backend node_modules..."
        rsync -av --delete $GITHUB_WORKSPACE/backend/node_modules/ $DEPLOY_DIR/backend/node_modules/

        echo "ðŸ“¦ Copying deployment scripts..."
        cp $GITHUB_WORKSPACE/deploy-on-server.sh $DEPLOY_DIR/
        cp $GITHUB_WORKSPACE/ecosystem.config.js $DEPLOY_DIR/
        cp -r $GITHUB_WORKSPACE/backend/prisma $DEPLOY_DIR/backend/
        cp -r $GITHUB_WORKSPACE/backend/templates $DEPLOY_DIR/backend/

        # Run deployment
        cd $DEPLOY_DIR
        echo "ðŸš€ Running deployment script..."
        bash deploy-on-server.sh