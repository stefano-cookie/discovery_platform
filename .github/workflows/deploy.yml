name: Deploy to Production

on:
  push:
    branches: [master]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          frontend/node_modules
          backend/node_modules
        key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-deps-

    - name: Install and build frontend
      working-directory: ./frontend
      env:
        CI: false
        GENERATE_SOURCEMAP: false
        INLINE_RUNTIME_CHUNK: false
        IMAGE_INLINE_SIZE_LIMIT: 0
        NODE_OPTIONS: --max-old-space-size=4096
        DISABLE_ESLINT_PLUGIN: true
        FAST_REFRESH: false
        TSC_COMPILE_ON_ERROR: true
        ESLINT_NO_DEV_ERRORS: true
      run: |
        npm ci --legacy-peer-deps --prefer-offline --no-audit --no-fund
        npm run build

    - name: Install and build backend
      working-directory: ./backend
      env:
        NODE_OPTIONS: --max-old-space-size=2048
      run: |
        npm ci --prefer-offline --no-audit --no-fund
        npx prisma generate
        npm run build

    - name: Prepare deployment package
      run: |
        mkdir -p deploy-package

        # Copy frontend build
        cp -r frontend/build deploy-package/frontend-build

        # Copy backend files
        mkdir -p deploy-package/backend
        cp -r backend/dist deploy-package/backend/
        cp -r backend/node_modules deploy-package/backend/
        cp -r backend/prisma deploy-package/backend/
        cp -r backend/templates deploy-package/backend/

        # Copy environment template (used if .env.production doesn't exist on server)
        cp backend/.env.production.template deploy-package/backend/

        # Copy deployment scripts and config
        cp deploy.sh deploy-package/
        cp ecosystem.config.js deploy-package/

        # Create archive for faster transfer
        cd deploy-package
        tar czf ../deploy.tar.gz .
        cd ..

        echo "üì¶ Deployment package size:"
        ls -lh deploy.tar.gz

    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H cfoeducation.it >> ~/.ssh/known_hosts

    - name: Upload to server
      run: |
        scp -i ~/.ssh/deploy_key deploy.tar.gz cfoeducation.it_f55qsn6wucc@cfoeducation.it:~/deploy.tar.gz

    - name: Deploy on server
      run: |
        ssh -i ~/.ssh/deploy_key cfoeducation.it_f55qsn6wucc@cfoeducation.it << 'ENDSSH'
          set -e

          echo "üöÄ Starting deployment..."

          # Extract deployment package
          cd ~
          rm -rf deploy-temp
          mkdir -p deploy-temp
          tar xzf deploy.tar.gz -C deploy-temp

          # Run deployment script
          cd deploy-temp
          chmod +x deploy.sh
          ./deploy.sh

          # Cleanup
          cd ~
          rm -rf deploy-temp deploy.tar.gz

          echo "‚úÖ Deployment completed!"
        ENDSSH

    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment..."

        # Wait for services to stabilize
        sleep 10

        # Check API health
        if curl -f -s https://discovery.cfoeducation.it/api/health > /dev/null; then
          echo "‚úÖ API is healthy"
        else
          echo "‚ùå API health check failed"
          exit 1
        fi

        # Check frontend
        if curl -f -s https://discovery.cfoeducation.it/ > /dev/null; then
          echo "‚úÖ Frontend is accessible"
        else
          echo "‚ùå Frontend check failed"
          exit 1
        fi

        echo "‚úÖ Deployment verification passed!"

    - name: Cleanup
      if: always()
      run: |
        rm -f ~/.ssh/deploy_key
        rm -f deploy.tar.gz
