name: Deploy to Production

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js with npm cache
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json

    - name: Cache frontend build
      uses: actions/cache@v4
      with:
        path: |
          frontend/node_modules/.cache
          frontend/build
        key: ${{ runner.os }}-frontend-build-${{ hashFiles('frontend/package-lock.json', 'frontend/src/**/*') }}
        restore-keys: |
          ${{ runner.os }}-frontend-build-

    - name: Cache backend build
      uses: actions/cache@v4
      with:
        path: |
          backend/node_modules/.cache
          backend/dist
        key: ${{ runner.os }}-backend-build-${{ hashFiles('backend/package-lock.json', 'backend/src/**/*') }}
        restore-keys: |
          ${{ runner.os }}-backend-build-

    - name: Install and build frontend
      working-directory: ./frontend
      env:
        # Optimization flags for faster builds
        CI: false
        GENERATE_SOURCEMAP: false
        INLINE_RUNTIME_CHUNK: false
        IMAGE_INLINE_SIZE_LIMIT: 0
        NODE_OPTIONS: --max-old-space-size=4096
        # Disable eslint during build for speed
        DISABLE_ESLINT_PLUGIN: true
        # Use faster JavaScript transformer
        FAST_REFRESH: false
      run: |
        # Clean install with legacy peer deps for React 19 compatibility
        # Retry up to 3 times with exponential backoff for npm registry failures
        for attempt in 1 2 3; do
          echo "Attempt $attempt of 3: Installing frontend dependencies..."
          if npm ci --legacy-peer-deps --prefer-offline; then
            echo "✓ npm install succeeded"
            break
          else
            if [ $attempt -eq 3 ]; then
              echo "✗ npm install failed after 3 attempts"
              exit 1
            fi
            wait_time=$((2 ** attempt))
            echo "✗ npm install failed, retrying in ${wait_time} seconds..."
            sleep $wait_time
          fi
        done
        # Build with optimizations
        npm run build
        

    - name: Install and build backend
      working-directory: ./backend
      env:
        NODE_OPTIONS: --max-old-space-size=2048
      run: |
        # Retry up to 3 times with exponential backoff for npm registry failures
        for attempt in 1 2 3; do
          echo "Attempt $attempt of 3: Installing backend dependencies..."
          if npm ci --prefer-offline; then
            echo "✓ npm install succeeded"
            break
          else
            if [ $attempt -eq 3 ]; then
              echo "✗ npm install failed after 3 attempts"
              exit 1
            fi
            wait_time=$((2 ** attempt))
            echo "✗ npm install failed, retrying in ${wait_time} seconds..."
            sleep $wait_time
          fi
        done
        npm run build
        # Generate Prisma client (avoid regeneration on server)
        npx prisma generate

    - name: Deploy to server via SSH
      uses: easingthemes/ssh-deploy@v4.1.10
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY || '' }}
        REMOTE_HOST: ${{ secrets.REMOTE_HOST || '' }}
        REMOTE_USER: ${{ secrets.REMOTE_USER || '' }}
        SOURCE: "./"
        TARGET: "/var/www/vhosts/cfoeducation.it/discovery_platform_temp/"
        EXCLUDE: ".git/,.github/,frontend/node_modules/,backend/.env,backend/.env.production,frontend/.env,*.log,.DS_Store"
          
    - name: Execute deployment script on server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.REMOTE_HOST || '' }}
        username: ${{ secrets.REMOTE_USER || '' }}
        key: ${{ secrets.SSH_PRIVATE_KEY || '' }}
        command_timeout: 30m
        script: |
          cd /var/www/vhosts/cfoeducation.it/discovery_platform_temp
          bash deploy-on-server.sh