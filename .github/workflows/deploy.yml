name: Deploy to Production

on:
  push:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          frontend/node_modules
          backend/node_modules
        key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-deps-

    - name: Install and build frontend
      working-directory: ./frontend
      env:
        CI: false
        GENERATE_SOURCEMAP: false
        INLINE_RUNTIME_CHUNK: false
        IMAGE_INLINE_SIZE_LIMIT: 0
        NODE_OPTIONS: --max-old-space-size=4096
        DISABLE_ESLINT_PLUGIN: true
        FAST_REFRESH: false
        TSC_COMPILE_ON_ERROR: true
        ESLINT_NO_DEV_ERRORS: true
      run: |
        npm ci --legacy-peer-deps --prefer-offline --no-audit --no-fund
        npm run build

    - name: Install and build backend
      working-directory: ./backend
      env:
        NODE_OPTIONS: --max-old-space-size=2048
      run: |
        npm ci --prefer-offline --no-audit --no-fund
        npx prisma generate
        npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          frontend/build/
          backend/dist/
          backend/node_modules/
          backend/prisma/
          backend/templates/
          deploy-on-server.sh
          ecosystem.config.js
        retention-days: 1

  deploy:
    needs: build
    runs-on: self-hosted

    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: ./artifacts

    - name: Run deployment script
      run: |
        # Deployment directory
        DEPLOY_DIR="/var/www/vhosts/cfoeducation.it/discovery_platform_temp"
        mkdir -p "$DEPLOY_DIR"

        # Copy built files to deployment directory
        echo "ðŸ“¦ Copying frontend build..."
        rsync -av --delete ./artifacts/frontend/build/ $DEPLOY_DIR/frontend/build/

        echo "ðŸ“¦ Copying backend dist..."
        rsync -av --delete ./artifacts/backend/dist/ $DEPLOY_DIR/backend/dist/

        echo "ðŸ“¦ Copying backend node_modules..."
        rsync -av --delete ./artifacts/backend/node_modules/ $DEPLOY_DIR/backend/node_modules/

        echo "ðŸ“¦ Copying deployment scripts..."
        cp ./artifacts/deploy-on-server.sh $DEPLOY_DIR/
        cp ./artifacts/ecosystem.config.js $DEPLOY_DIR/
        cp -r ./artifacts/backend/prisma $DEPLOY_DIR/backend/
        cp -r ./artifacts/backend/templates $DEPLOY_DIR/backend/

        # Run deployment
        cd $DEPLOY_DIR
        echo "ðŸš€ Running deployment script..."
        bash deploy-on-server.sh