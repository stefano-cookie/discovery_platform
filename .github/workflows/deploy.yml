name: Deploy to Production

on:
  push:
    branches:
      - master
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      env:
        REACT_APP_API_URL: https://discovery.cfoeducation.it/api

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Build backend
      working-directory: ./backend
      run: |
        npm run build
        npx prisma generate

    - name: Create deployment package
      run: |
        tar -czf deployment.tar.gz \
          --exclude='node_modules' \
          --exclude='.git' \
          --exclude='uploads/*' \
          --exclude='*.env' \
          --exclude='*.env.local' \
          --exclude='deployment.tar.gz' \
          backend/dist \
          backend/package*.json \
          backend/prisma \
          frontend/build

    - name: Deploy to server
      uses: appleboy/scp-action@v0.1.5
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        source: "deployment.tar.gz"
        target: "${{ secrets.SERVER_PATH }}"

    - name: Execute remote commands
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          cd ${{ secrets.SERVER_PATH }}
          
          # Backup precedente
          if [ -d "backend_backup" ]; then
            rm -rf backend_backup.old
            mv backend_backup backend_backup.old
          fi
          if [ -d "frontend_backup" ]; then
            rm -rf frontend_backup.old
            mv frontend_backup frontend_backup.old
          fi
          
          # Backup attuale
          cp -r backend backend_backup
          cp -r frontend frontend_backup
          
          # Estrai nuovo deployment
          tar -xzf deployment.tar.gz
          
          # Installa dipendenze backend
          cd backend
          npm ci --production
          npx prisma generate
          
          # Copia .env.production come .env
          cp .env.production .env
          
          # Migra database se necessario
          # npx prisma migrate deploy
          
          # Riavvia backend con PM2
          pm2 restart discovery-api || pm2 start dist/server.js --name discovery-api
          
          # Cleanup
          cd ..
          rm deployment.tar.gz
          
          echo "âœ… Deployment completato!"

    - name: Cleanup
      if: always()
      run: rm -f deployment.tar.gz