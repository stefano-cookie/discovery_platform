name: Deploy to Production

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Cache dependencies and builds
      uses: actions/cache@v4
      id: cache
      with:
        path: |
          ~/.npm
          frontend/node_modules
          backend/node_modules
          frontend/node_modules/.cache
        key: ${{ runner.os }}-deps-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-deps-

    - name: Install and build frontend
      working-directory: ./frontend
      env:
        # Optimization flags for faster builds
        CI: false
        GENERATE_SOURCEMAP: false
        INLINE_RUNTIME_CHUNK: false
        IMAGE_INLINE_SIZE_LIMIT: 0
        NODE_OPTIONS: --max-old-space-size=4096
        # Disable eslint during build for speed
        DISABLE_ESLINT_PLUGIN: true
        # Use faster JavaScript transformer
        FAST_REFRESH: false
        # Disable unnecessary features
        TSC_COMPILE_ON_ERROR: true
        ESLINT_NO_DEV_ERRORS: true
      run: |
        # Use cached node_modules if available, otherwise install
        if [ ! -d "node_modules" ]; then
          echo "Installing frontend dependencies..."
          npm ci --legacy-peer-deps --prefer-offline --no-audit --no-fund
        else
          echo "✓ Using cached node_modules"
        fi
        # Build with optimizations
        npm run build
        

    - name: Install and build backend
      working-directory: ./backend
      env:
        NODE_OPTIONS: --max-old-space-size=2048
      run: |
        # Use cached node_modules if available, otherwise install
        if [ ! -d "node_modules" ]; then
          echo "Installing backend dependencies..."
          npm ci --prefer-offline --no-audit --no-fund
        else
          echo "✓ Using cached node_modules"
          # Prisma might need regeneration even with cache
          npx prisma generate
        fi
        npm run build

    - name: Test SSH connection
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        ssh-keyscan -H ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts
        ssh -i ~/.ssh/deploy_key -o ConnectTimeout=30 ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} "echo 'SSH connection successful'"

    - name: Deploy to server via SSH
      uses: easingthemes/ssh-deploy@v4.1.10
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY || '' }}
        REMOTE_HOST: ${{ secrets.REMOTE_HOST || '' }}
        REMOTE_USER: ${{ secrets.REMOTE_USER || '' }}
        SOURCE: "./"
        TARGET: "/var/www/vhosts/cfoeducation.it/discovery_platform_temp/"
        EXCLUDE: ".git/,.github/,frontend/node_modules/,backend/.env,backend/.env.production,frontend/.env,*.log,.DS_Store"
          
    - name: Execute deployment script on server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.REMOTE_HOST || '' }}
        username: ${{ secrets.REMOTE_USER || '' }}
        key: ${{ secrets.SSH_PRIVATE_KEY || '' }}
        command_timeout: 30m
        script: |
          cd /var/www/vhosts/cfoeducation.it/discovery_platform_temp
          bash deploy-on-server.sh